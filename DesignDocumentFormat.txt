Design Document Format


LinearEquation class:

	Instance Variables:
		// Create a bunch of variables
		// Decimal format for formatting
		DecimalFormat dc1 = (#.00)
		private int x1 // First x coordinate
		private int x2 // Second x coordinate
		private int y1 // First y coordinate
		private int y2 // Second y coordinate
		private double slopeValue // Slope
		private double slopeString // For eqaution
		private double yIntercept // y-intercept
		private String equation // string of equation 
		private double distanceBetweenPoints // distance

	Constructor
		// Set up instance variables
		public LinearEquation(int x1, int y1, int x2, int y2)
        Create changeInX and changeInY for easier calculations

	// Calculations
		Do calculation for slope (y2 - y1) / (x2 - x1)

		Find y intercept by
			- y = mx + b
			- b = y - mx
			- yIntercept = y1 - (slope * x1)

        // Use the methods to find nice slopes and nice yintercept for equation
		Equation is y = mx + b



	// Using methods from the math class
		Distance between two points 
		distanceBetweenPoints = √((x2 - x1)² + (y2 - y1)²)


	Methods
	
public String toString()
		This method will return all relevant information about this instance including:
		X and Y coordinate information
		Pairs (Casting to doubles)
		Slope, y-intercept, and Slope Intercept Form equation
		Distance b/t points.

public String solveWithThirdCoordinate(double x)
		This method will take in a third x coordinate and 
		use it to solve for the y value based on the linear equation (Incluidng slope and y-intercept info)
		Return a string of the information in (x,y) form

public String niceSlope()
	    This method will return nice fractions
		Variables: 
		int Numerator = changeInY
	    int Denominator = changeInX
		gcf = 1

		Step1: Find greatest common factor
	    	for (int i = 1; Math.min(Math.abs(denominator), Math.abs(numerator)) >= i; i++)
			find gcf 
		Step 2: Negatives
			if denominator is negative, multiply both num and denom by -1
		Step 3: Return x for slope = 1 and return -x for slope = -1
		Step 4: Return any possible whole numbers
	    	if gcf = abs(changeInX)
			return whole number + "x "
	    Step 5: Return fractions
	        return changeInY / gcf + changeInX / gcf + "x "

public string niceYIntercept() 
		step 1: If yIntercept is negative, return "- " + yIntercept 
		step 2: else Return "+ " + yIntercept

public string equation()
		step 1: If slope is 0 and yIntercept is 0, return "y = 0"
		step 2: If slope is 0, return "y = " + yIntercept
		step 3: If yIntercept is 0, return "y = " + niceSlope()
		step 4: Else Return "y = " + slope + "x + " + niceYIntercept()

	    






EquationRunner.java:

	Print out a welcome message first 

	Step 1: Ask user to enter first coordinate point (Store in variable w. scanner)
	Step 2: Ask user to enter second coordinate point (Store in variable w. scanner)
    Step 3: Find the index of both ‘,’ using indexOf() method, Classified as commaIndex1 and commaIndex2.
	Step 4: X1 is substring from (1, commaIndex1), Y1 is substring from (commaIndex1 + 1, (length - 1)). The length is the length of the string.
    Step 4.5: Get substring of the value, then use parseInt to convert substring into integer coordinate.
	Step 5: Repeat step 4 for X2 and Y2
	Step 6: Construct linear equation object with the information on coordinates
	Step 7: Call toString() to output information
	Step 8: Ask for a third x-value to solve on the linear equation (Again, use scanner)
	Step 9: print out the solution by calling solveWithThirdCoordinate(x) with the third x value to get the return value
	Step 10: We done :D


	

